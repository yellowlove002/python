1(a).

import random 
def main():
    chars = createList()  #Create a list of characters
    print("Lowercase letters: ") #display the list
    displayList(chars)
    counts=countLetters(chars) #count occurences of letters
    print("Occurences of letter are ")
    displayCounts(counts)
def getRandomCharacter(ch1, ch2):
    return chr(random.randint(ord(ch1), ord(ch2)))
def getRandomLowerCaseLetter():
    return getRandomCharacter('a', 'z')
def createList():
    chars =[]
    for i in range(100):
	   	chars.append(getRandomLowerCaseLetter())
    return chars
def displayList(chars):
    for i in range(len(chars)):
	    if (i + 1) % 20 == 0:
		    print(chars[i])
	    else:
		    print(chars[i], end = ' ')
def countLetters(chars):
    counts = 26 * [0]
    for i in range(len(chars)):
	    counts[ord(chars[i]) - ord('a')] += 1               
    return counts
def displayCounts(counts):
    for i in range(len(counts)):
	    if (i + 1) % 10 == 0:
		    print(counts[i], chr(i + ord('a')))
	    else:
			    print(counts[i], chr(i + ord('a')), end = ' ')
main() # Call the main function


1.(b)

def fun(a,b):
    c=[]
    for i in range(a):
        res=[int(x)for x in input().split(" ")[:b]]
        c.append(res)
    return c
def display(mat):
    for i in mat:
        print(i)
r1,c1=map(int,input("Enter the number of rows and columns of first matrix:").split(" "))
print("Enter the elements of the First matrix:")
mat1=fun(r1,c1)
r2,c2=map(int,input("Enter the number of rows and columns of second matrix:").split())
print("Enter the elements the Second matrix:")
mat2=fun(r2,c2)
print("Resultant Matrix is first initialized with all elements = 0")
if c1==r2:
    mul=[]
    for i in range(r1):
        temp=[]
        for j in range(c2):
            put=0
            temp.append(put)
        mul.append(temp)
    display(mul)
    for i in range(len(mat1)):
        for j in range(len(mat2[0])):
            for k in range(len(mat2)):
                mul[i][j]+=mat1[i][k]*mat2[k][j]
else:
    print("Enter Valid number of rows and columns for thw second matrix(i.e., Column1 = Row2)")
print("First Matrix:")
display(mat1)
print("Second Matrix:")
display(mat2)
print("Product Matrix:")
display(mul)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.

import RandomCharacter
def main():
	chars = createList()
	print("The lowercase letters are:")
	displayList(chars)
	counts = countLetters(chars)
	print("The occurences of each letter are:")
	displayCounts(counts)
def createList():
	chars =[]
	for i in range(100):
		chars.append(RandomCharacter.getRandomLowerCaseLetter())
	return chars
def displayList(chars):
	for i in range(len(chars)):
		if (i + 1) % 20 == 0:
			print(chars[i])
		else:
			print(chars[i], end = ' ')
def countLetters(chars):
	counts = 26 * [0]
	for i in range(len(chars)):
		counts[ord(chars[i]) - ord('a')] += 1
	return counts
def displayCounts(counts):
	for i in range(len(counts)):
		if (i + 1) % 10 == 0:
			print(counts[i], chr(i + ord('a')))
		else:
			print(counts[i], chr(i + ord('a')), end = ' ')
main()

Randomcharacter.py:

from random import randint  # import randint
def getRandomCharacter(ch1, ch2):
	return chr(randint(ord(ch1), ord(ch2)))
def getRandomLowerCaseLetter():
	return getRandomCharacter('a', 'z')
def getRandomUpperCaseLetter():
	return getRandomCharacter('A', 'Z')
def getRandomDigitCaseLetter():
	return getRandomCharacter('0', '9')
def getRandomASCIICaseLetter():
	return chr(randint(0, 127))

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.

import pandas as pd
import numpy as np
exam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
print("DataFrame created from specified Dictionary Data with index labels:")
df = pd.DataFrame(exam_data , index=labels)
print(df)
print("Summary of the basic information about this DataFrame and its data:")
print(df.info())
print("First three rows of the data frame:")
print(df.iloc[:3])
print("Select specific columns:")
print(df[['name', 'score']])
print("Select specific columns and rows:")
print(df.iloc[[1, 3, 5, 6], [1, 3]])
print("Number of attempts in the examination is greater than 2:")
print(df[df['attempts'] > 2])
total_rows=len(df.axes[0])
total_cols=len(df.axes[1])
print("Number of Rows: "+str(total_rows))
print("Number of Columns: "+str(total_cols))
print("Rows where score is missing:")
print(df[df['score'].isnull()])
print("Rows where score between 15 and 20 (inclusive):")
print(df[df['score'].between(15, 20)])
print("Number of attempts in the exam < 2 and score > 15 :")
print(df[(df['attempts'] < 2) & (df['score'] > 15)])
print("\nOriginal data frame:")
print(df)
print("\nChange the score in row 'd' to 11.5:")
df.loc['d', 'score'] = 11.5
print(df)
print("\nSum of the examination attempts by the students:")
print(df['attempts'].sum())
print("\nMean score of the students in data frame:")
print(df['score'].mean())
print("Original rows:")
print(df)
print("\nAppend a new row:")
df.loc['k'] = [1, 'Suresh', 'yes', 15.5]
print("Print all records after insert a new record:")
print(df)
print("\nDelete the new row and display the original  rows:")
df = df.drop('k')
print(df)
print("Orginal rows:")
print(df)
df.sort_values(by=['name', 'score'], ascending=[False, True])
print("Sort the data frame first by ‘name’ in descending order, then by ‘score’ in ascending order:")
print(df)
print("Original rows:")
print(df)
print("\nReplace the 'qualify' column contains the values 'yes' and 'no'  with True and  False:")
df['qualify'] = df['qualify'].map({'yes': True, 'no': False})
print(df)
print("Original rows:")
print(df)
print("\nChange the name 'James' to ‘Suresh’:")
df['name'] = df['name'].replace('James', 'Suresh')
print(df)
print("Original rows:")
print(df)
color = ['Red','Blue','Orange','Red','White','White','Blue','Green','Green','Red']
df['color'] = color
print("\nNew DataFrame after inserting the 'color' column")
print(df)
print("Original DataFrame")
print(df)
print('Data from new_file.csv file:')
df.to_csv('new_file.csv', sep='\t', index=False)
new_df = pd.read_csv('new_file.csv')
print(new_df)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.(a).

Opening a File  

# Open function to open the file "MyFile1.txt"  # (same directory) in append mode and  file1 = open("MyFile.txt","a")  
# store its reference in the variable file1  
# and "MyFile2.txt" in D:\Text in file2 file2 = open(r"D:\Text\MyFile2.txt","w+")  
Closing a file  
# Opening and Closing a file "MyFile.txt"  
# for object name file1.  
file1 = open("MyFile.txt","a")  
file1.close()  
Writing to a file  
There are two ways to write in a file.  
1.write() : Inserts the string str1 in a single line in the text file. File_object. write (str1)  
2.writelines() : For a list of string elements, each string is inserted in the text file. Used to insert multiple strings at a single time.  
# Open function to open the file "MyFile1.txt" 
# (same directory) in append mode and 
file1 = open("MyFile.txt","a") 
# store its reference in the variable file1 
# and "MyFile2.txt" in D:\Text in file2 file2 = open(r"D:\Text\MyFile2.txt","w+") 
# Opening and Closing a file "MyFile.txt" 
# for object name file1. 
file1 = open("MyFile.txt","a") 
file1.close() 
# Program to show various ways to read and 
# write data in a file. 
file1 = open("myfile.txt","w") 
L = ["This is Delhi \n","This is Paris \n","This is London \n"] 
# \n is placed to indicate EOL (End of Line)
file1.write("Hello \n")
file1.writelines(L) 
file1.close() #to change file access modes 
file1 = open("myfile.txt","r+") 
print ("Output of Read function is ")
print ("",file1.read())
# seek(n) takes the file handle to the nth 
# bite from the beginning. 
file1.seek(0) 
print ("Output of Readline function is ")
print ("",file1.readline()) 
print ("",file1.seek(0)) 
# To show difference between read and readline 
print ("Output of Read(9) function is ") 
print ("",file1.read(9)) 
print ("",file1.seek(0)) 
print ("Output of Readline(9) function is ") 
print ("",file1.readline(9)) 
print ("",file1.seek(0)) 
# readlines function 
print ("Output of Readlines function is ") 
print ("",file1.readlines())
file1.close()

4.(b).

file1 = open("myfile.txt","w") 
L = ["This is Delhi \n","This is Paris \n","This is London \n"]
file1.close() 
file1 = open("myfile.txt","a")#append mode 
file1.write("Today \n") 
file1.close() 
file1 = open("myfile.txt","r") 
print ("Output of Readlines after appending") 
print("",file1.readlines()) 
file1.close() 
file1 = open("myfile.txt","w")#write mode 
file1.write("Tomorrow \n") 
file1.close() 
file1 = open("myfile.txt","r") 
print ("Output of Readlines after writing") 
print ("",file1.readlines())  
file1.close()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6.

import matplotlib.pyplot as plt import csv 
x=[] y=[] 
with open('file1.txt', 'r') as csvfile:     plots= csv.reader(csvfile, delimiter=',')     for row in plots: 
        x.append(int(row[0])) 
        y.append(int(row[1])) 
plt.plot(x,y, marker='o') 
plt.title('Data from the CSV File: Year and Rainfall') 
plt.xlabel('Year') 
plt.ylabel('Rainfall') 
plt.show() 

Contents of CSV File (file1.txt) : 
 
2011,50
2012,70
2013,40
2014,80
2015,60
2016,45
2017,70
2018,90
2019,70
2020,80
2021,90
2022,100

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.(a).Histogram

import pandas as pd
import matplotlib.pyplot as plt 
data = [['E011', 'M', 32, 123, 'Normal', 350],
        ['E012', 'F', 40, 114, 'Overweight', 350],
        ['E013', 'F', 29, 135, 'Obesity', 169],
        ['E014', 'M', 30, 139, 'Underweight', 189],
        ['E015', 'F', 25, 117, 'Underweight', 183],
        ['E016', 'M', 30, 121, 'Normal', 80],
        ['E017', 'M', 42, 133, 'Obesity', 166],
        ['E018', 'F', 36, 140, 'Normal', 200],
        ['E019', 'M', 22, 133, 'Normal', 75],
        ['E020', 'M', 44, 133, 'Underweight', 40] ]
df = pd.DataFrame(data, columns = ['EMPID', 'Gender', 
                                   'Age', 'Sales',
                                   'BMI', 'Income'] )
df.hist()
plt.show()

7.(b).Bar Chart

import pandas as pd
import matplotlib.pyplot as plt
data = [['E011', 'M', 32, 123, 'Normal', 350],
        ['E012', 'F', 40, 114, 'Overweight', 350],
        ['E013', 'F', 29, 135, 'Obesity', 169],
        ['E014', 'M', 30, 139, 'Underweight', 189],
        ['E015', 'F', 25, 117, 'Underweight', 183],
        ['E016', 'M', 30, 121, 'Normal', 80],
        ['E017', 'M', 42, 133, 'Obesity', 166],
        ['E018', 'F', 36, 140, 'Normal', 200],
        ['E019', 'M', 22, 133, 'Normal', 75],
        ['E020', 'M', 44, 133, 'Underweight', 40] ]
df = pd.DataFrame(data, columns = ['EMPID', 'Gender', 
                                   'Age', 'Sales',
                                   'BMI', 'Income'] )
df.plot.bar()
plt.bar(df['Age'], df['Sales'])
plt.xlabel("Age")
plt.ylabel("Sales")
plt.show()

7.(c).

import pandas as pd
import matplotlib.pyplot as plt
data = [['E011', 'M', 32, 123, 'Normal', 250],
        ['E012', 'F', 40, 114, 'Overweight', 300],
        ['E013', 'F', 29, 135, 'Obesity', 169],
        ['E014', 'M', 30, 139, 'Underweight', 189],
        ['E015', 'F', 25, 117, 'Underweight', 183],
        ['E016', 'M', 30, 121, 'Normal', 80],
        ['E017', 'M', 42, 133, 'Obesity', 166],
        ['E018', 'F', 36, 140, 'Normal', 200],
        ['E019', 'M', 22, 133, 'Normal', 75],
        ['E020', 'M', 44, 133, 'Underweight', 40] ]
df = pd.DataFrame(data, columns = ['EMPID', 'Gender', 
                                    'Age', 'Sales',
                                    'BMI', 'Income'] )
plt.title('Age')
plt.pie(df['Age'], labels = {"A", "B", "C",
                             "D", "E", "F",
                             "G", "H", "I", "J"},
autopct ='% 1.1f %%', shadow = True)
plt.show()
plt.title('Income')
plt.pie(df['Income'], labels = {"A", "B", "C",
                                "D", "E", "F",
                                "G", "H", "I", "J"},                                  
autopct ='% 1.1f %%', shadow = True)
plt.show()
plt.title('Sales')  
plt.pie(df['Sales'], labels = {"A", "B", "C",
                               "D", "E", "F",
                               "G", "H", "I", "J"},
autopct ='% 1.1f %%', shadow = True)
plt.show()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8.

import matplotlib.pyplot as plt
print("")
print("Original Photo Details:")
print("======== ===== =======")
print("")
img = plt.imread('ito.jpg')
print(img[:3])
plt.axis("off")
imgplot = plt.imshow(img)
plt.title('Original Photo')
plt.show()
print("")
print("Transformed Gray Photo Details:")
print("=========== ==== ===== =======")
print("")
lum_img = img[:,:,1]
plt.axis("off")
plt.gray()
print(lum_img)
imgplot = plt.imshow(lum_img)
plt.title('Gray Photo')
plt.show()
red_multiplier = [1, 0, 0]
plt.axis("off")
imgplot = plt.imshow(red_multiplier * img)
plt.title('Tinted Red Image')
plt.show()
blue_multiplier = [0, 0, 1]
plt.axis("off")
imgplot = plt.imshow(blue_multiplier * img)
plt.title('Tinted Blue Image')
plt.show()
green_multiplier = [0, 1, 0]
plt.axis("off")
imgplot = plt.imshow(green_multiplier * img)
plt.title('Tinted Green Image')
plt.show()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9.Data Representation in Scikit-Learn:

import seaborn as sns
iris = sns.load_dataset('iris')
iris.head()

-------------------------------------

%matplotlib inline
import seaborn as sns; sns.set()
sns.pairplot(iris, hue='species', size=1.5);

----------------------------------------------

x_iris = iris.drop('species', axis=1)
x_iris.shape

---------------------------------------------

Supervised learning example: simple linear regression:

import matplotlib.pyplot as plt
import numpy as np
rng = np.random.randomstate(42)
x = 10 * rng.rand(50)
y = 2 * x - 1 + rng.randn(50)
plt.scatter(x, y);

---------------------------------

Choose a class of model and model hyperparameters:

from sklearn.linear_model import linearregression
model = linearregression(fit_intercept=true)
model

-------------------------------------------------------

Arrange data into a features matrix and target vector:

x = x[:,np.newaxis]
x.shape

----------------------

Fit the model to your data:

model.fit(x, y)

-------------------

Predict labels for unknown data:

xfit = np.linspace(-1, 11)
xfit = xfit[:,np.newaxis]
yfit = model.predict(xfit)
plt.scatter(x, y)
plt.plot(xfit, yfit);

----------------------------

Supervised learning example: Iris classification:

from sklearn.cross_validation import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x_iris, y_iris,random_state=1)
from sklearn.naive_bayes import gaussiannb
model = gaussiannb()
model.fit(xtrain, ytrain)
y_model = model.predict(xtest)
from sklearn.metrics import accuracy_score
accuracy_score(ytest, y_model)

--------------------------------------------------------------------------------------

Unsupervised learning example: Iris dimensionality:

from sklearn.decomposition import pca
model = pca(n_components=2)
model.fit(x_iris)
x_2d = model.transform(x_iris)
iris['pca1'] = x_2d[:, 0]
iris['pca2'] = x_2d[:, 1]
sns.lmplot(x="pca1",y= "pca2", hue='species', data=iris, fit_reg=false);

---------------------------------------------------------------------------

Unsupervised learning: Iris clustering:

from sklearn.mixture import GaussianMixture as gmm   
model = gmm(n_components=3,covariance_type='full')  
model.fit(x_iris)
y_gmm = model.predict(x_iris)
iris['cluster'] = y_gmm
sns.lmplot("pca1", "pca2", data=iris, hue='species', col='cluster', fit_reg=false);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------